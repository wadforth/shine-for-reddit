// GLOBAL RESETS AND FIXES
$("body").removeClass("listing-chooser-collapsed");

// FUNCTIONS SECTION

// this function returns our query string variable
function getQueryString(name) {
	name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
	var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
		results = regex.exec(location.search);
	return results === null
		? ""
		: decodeURIComponent(results[1].replace(/\+/g, " "));
}

function IsJsonString(str) {
	try {
		JSON.parse(str);
	} catch (e) {
		return false;
	}
	return true;
}

// INITIAL VARIABLE CREATION SECTION

// creating the settings variable to use when we update and save settings
var currentSettings = {};

// var commentNumber; // For numbering comments

// creating the default settings variable if they havn't saved any settings yet
var defaultSettings = {
	global: {
		layout: "list",
		shortcuts: "show",
		sidebar: "",
		sidebar_fixed: "default",
		multis: "",
		navigate: "hide",
		newreddit: "show"
	},

	customization: {
		layout: "modern",
		theme: "modernwhite",
		color: "orange",
		icons: "gray"
	},

	list: {
		split: "6040",
		columns: "two",
		limit: "0"
	},

	grid: {
		columns: "5",
		nsfw: "no",
		split: "6040",
		limit: "0",
		compact: "0"
	},

	subreddits: [
		{ url: "www.reddit.com/r/shine/", layout: "list" },
		{ url: "www.reddit.com/r/aww/", layout: "grid" },
		{ url: "www.reddit.com/r/earthporn/", layout: "list" }
	],

	multireddits: [
		{ url: "www.reddit.com/user/evilnight/m/redditunes", layout: "grid" },
		{ url: "www.reddit.com/user/Abbigale221/m/moviesandtv", layout: "list" }
	],

	account: {
		status: "shinebright"
	},

	message: "",

	version: {
		current: "",
		updateinfo: "show",
		dismissed: "no"
	}
};

var settingsContent = {
	default: {
		title: "General Settings",
		content: [
			{
				name: "default-view",
				title: "Default View",
				desc: "The default view for most pages.",
				options: [
					{ value: "list", title: "List View" },
					{ value: "grid", title: "Grid View" }
				]
			},
			{
				name: "sidebar-fixed",
				title: "Position fixed for sidebar",
				desc: "No matter how far you will scroll, sidebar will be visible.",
				options: [
					{ value: "default", title: "Off" },
					{ value: "fixed", title: "Fixed" }
				]
			},
			{
				name: "update-info",
				title: "Show Update Info",
				desc: "Display information about the SHINE updates.",
				options: ["show", "hide"]
			},
			{
				name: "shortcuts-bar",
				title: "Shortcuts Bar",
				desc: "The default view for most pages.",
				options: ["show", "hide"]
			},
			{
				name: "comment-navigation",
				title: "Buttons for comment navigation",
				desc: "Display buttons for navigating comments.",
				options: ["show", "hide"]
			}
		]
	},
	customize: {
		title: "Theme Settings",
		content: {
			color: {
				name: "color-theme",
				title: "Color Selector",
				desc: "Pick a color that will be used as accent",
				options: [
					"red",
					"orange",
					"amber",
					"yellow",
					"lime",
					"greenlight",
					"shamrock",
					"teal",
					"cyan",
					"blue",
					"indigo",
					"purple",
					"pink"
				]
			},
			theme: {
				name: "main-theme",
				title: "Theme Selector",
				desc: "If you are using RES, turn on the Night Mode for dark themes.",
				options: [
					{ value: "modernwhite", title: "White (modern)" },
					{ value: "violet", title: "Dracula" },
					{ value: "material", title: "Material" },
					{ value: "blue", title: "Night" },
					{ value: "brown", title: "Chocolate" },
					{ value: "space", title: "Space" },
					{ value: "gray", title: "Pale" },
					{ value: "dark", title: "Dark" },
					{ value: "black", title: "Black" },
					{ value: "legacy-white", title: "White (legacy)" },
					{ value: "legacy-night", title: "Night (legacy)" }
				]
			},
			misc: [
				{
					name: "layout-switch",
					title: "List View Design",
					options: [
						{ value: "modern", title: "Flat (modern)" },
						{ value: "legacy", title: "Cards (legacy)" }
					]
				},
				{
					name: "color-switch",
					title: "Icon type for posts",
					options: [
						{ value: "gray", title: "Grayscale" },
						{ value: "color", title: "Colorful" },
						{ value: "accent", title: "Color-accented" },
						{ value: "lines", title: "Linear" }
					]
				}
			]
		}
	},
	list: {
		title: "List Settings",
		desc: "The settings below are applied to all List View pages.",
		content: [
			{
				name: "list-layout",
				title: "List View Layout",
				options: [
					{ value: "one", title: "Display content underneath list item." },
					{ value: "two", title: "Display content to the right of list items." }
				]
			},
			{
				name: "list-split",
				title: "Image & Comments Split Percentage",
				options: [
					{ value: "7030", title: "70 / 30" },
					{ value: "6040", title: "60 / 40" },
					{ value: "5050", title: "50 / 50" },
					{ value: "4060", title: "40 / 60" },
					{ value: "3070", title: "30 / 70" }
				]
			},
			{
				name: "list-limit",
				title: "Limit Infinite Loading",
				options: [
					{ value: "0", title: "No limits" },
					{ value: "100", title: "Limit over 100" },
					{ value: "250", title: "Limit over 250" },
					{ value: "500", title: "Limit over 500" },
					{ value: "1000", title: "Limit over 1000" }
				]
			}
		]
	},
	grid: {
		title: "Grid Settings",
		desc: "The settings below are applied to all Grid View pages.",
		content: [
			{
				name: "number-columns",
				title: "Number of Columns",
				options: [1, 2, 3, 4, 5, 6, 7, 8, 9]
			},
			{
				name: "grid-split",
				title: "Image & Comments Split Percentage",
				options: [
					{ value: "7030", title: "70 / 30" },
					{ value: "6040", title: "60 / 40" },
					{ value: "5050", title: "50 / 50" },
					{ value: "4060", title: "40 / 60" },
					{ value: "3070", title: "30 / 70" }
				]
			},
			{
				name: "grid-limit",
				title: "Limit Infinite Loading",
				options: [
					{ value: "0", title: "No limits" },
					{ value: "100", title: "Limit over 100" },
					{ value: "250", title: "Limit over 250" },
					{ value: "500", title: "Limit over 500" },
					{ value: "1000", title: "Limit over 1000" }
				]
			},
			{
				name: "grid-compact",
				title: "Grid spacing",
				options: [
					{ value: "0", title: "Dynamic" },
					{ value: "30", title: "30 pixels" },
					{ value: "20", title: "20 pixels" },
					{ value: "10", title: "10 pixels" }
				]
			},
			{
				name: "show-nsfw",
				title: "Show NSFW Automatically",
				options: ["yes", "no"]
			}
		]
	},
	keys: {
		title: "Key Bindings",
		desc: "These are currently available keyboard shortcuts:",
		content: [
			{ value: "f", title: "Open search box" },
			{ value: "q", title: "Toggle sidebar" },
			{ value: "m", title: "Toggle multireddits" },
			{ value: "k", title: "Go to next post" },
			{ value: "j", title: "Go to previous post" },
			{ value: "w", title: "Upvote currently viewed post" },
			{ value: "s", title: "Downvote currently viewed post" },
			{ value: "→", title: "Go to next comment (right arrow)" },
			{ value: "←", title: "Go to previous comment (left arrow)" },
			{ value: "ESC", title: "Closes all expands/settings/search etc." }
		]
	}
};

// this creates our variable that stories what today's date is
var d = new Date();
var curr_date = d.getDate();
var curr_month = d.getMonth() + 1;
todayIs = curr_month.toString() + curr_date.toString();

// this is the main SHINE base function that runs after we've retrieved or created thier settings
// this sets up the basic global interface
function SHINE() {
	currentSettings.account.status = "shinebright";

	//console.log(currentSettings);

	if (!currentSettings.version) {
		var changelogSettings = {
			version: {
				current: "",
				updateinfo: "show",
				dismissed: "no"
			}
		};

		currentSettings = $.extend(currentSettings, changelogSettings);
		chrome.storage.local.set({ shine: currentSettings });
	}

	if (!currentSettings.customization) {
		var customizationSettings = {
			customization: {
				layout: "legacy",
				theme: "modernwhite",
				color: "orange",
				icons: "gray"
			}
		};

		currentSettings = $.extend(currentSettings, customizationSettings);
		chrome.storage.local.set({ shine: currentSettings });
	}

	if (!currentSettings.global.navigate) {
		var navigateSettings = {
			global: {
				navigate: "hide"
			}
		};

		currentSettings = $.extend(true, currentSettings, navigateSettings);
		chrome.storage.local.set({ shine: currentSettings });
	}

	if (!currentSettings.global.newreddit) {
		var newredditSettings = {
			global: {
				newreddit: "show"
			}
		};

		currentSettings = $.extend(true, currentSettings, newredditSettings);
		chrome.storage.local.set({ shine: currentSettings });
	}

	if (!currentSettings.global.sidebar_fixed) {
		var sidebarFixedSettings = {
			global: {
				sidebar_fixed: "fixed"
			}
		};

		currentSettings = $.extend(true, currentSettings, sidebarFixedSettings);
		chrome.storage.local.set({ shine: currentSettings });
	}

	if (!currentSettings.list.limit || !currentSettings.grid.limit) {
		var limitSettings = {
			list: {
				limit: "0"
			},
			grid: {
				limit: "0"
			}
		};

		currentSettings = $.extend(true, currentSettings, limitSettings);
		chrome.storage.local.set({ shine: currentSettings });
	}

	if (!currentSettings.grid.compact) {
		var compactSettings = {
			grid: {
				compact: "0"
			}
		};

		currentSettings = $.extend(true, currentSettings, compactSettings);
		chrome.storage.local.set({ shine: currentSettings });
	}

	// adding our menu interface

	var currentSubreddit = $("head")
		.find('link[rel="canonical"]')
		.attr("href");
	if (currentSubreddit != undefined) {
		currentSubreddit = currentSubreddit.match(/reddit.com\/r\/\w*\//)
			? currentSubreddit.match(/r\/\w*\//)[0]
			: "";
	}

	if ($("body > div#2x-container").length) {
		var htmlNewShine = `<div class="dark-background"></div>
		<div id="newlayoutinfo"><h1>Shine currently does not work with New Reddit</h1>
		<p>You can still use it though, just go to your profile preferences and <b>disable:</b></p> <p class="setting">"Opt out of the redesign"</p> <p>also for full experience <b>enable:</b></p> <p class="setting">"View user profiles on desktop using legacy mode"</p>
			<div class="buttons"><span class="btn dismiss">Dismiss</span><a href="https://reddit.com/prefs" class="btn">Go to preferences &rarr;</a></div>
		</div>`;

		if (currentSettings.global.newreddit == "show") {
			$("body").append(htmlNewShine);
			$("body").addClass("SHOWINFO");
		}
		$("body").addClass("SHITE");
		return false;
	}

	htmlToAdd =
		"" +
		'<div class="dark-background"></div>' +
		'<div class="shine-nav">' +
		'<div class="shine-menu-button shine-search">' +
		"<label>search reddit (f)</label>" +
		"</div>" +
		'<div class="shine-menu-button shine-settings">' +
		"<label>shine settings</label>" +
		"</div>";

	if ($("body").hasClass("with-listing-chooser")) {
		htmlToAdd =
			htmlToAdd +
			'<div class="shine-menu-button shine-multi">' +
			"<label>toggle multireddits (m)</label>" +
			"</div>";
	}

	htmlToAdd =
		htmlToAdd +
		'<div class="shine-menu-button shine-sidebar">' +
		"<label>toggle sidebar (q)</label>" +
		"</div>" +
		'<a href="" class="shine-menu-button shine-submit">' +
		"<label>post to reddit</label>" +
		"</a>" +
		'<div class="shine-menu-button shine-navicon">' +
		'<span class="lines"></span>' +
		"</div>" +
		"</div>" +
		'<div class="shine-nav-comment">' +
		'<div class="shine-menu-button shine-comment-prev">' +
		"</div>" +
		'<div class="shine-menu-button shine-comment-next">' +
		"</div>" +
		"</div>" +
		'<form action="//www.reddit.com/' +
		currentSubreddit +
		'search" id="shine-search" name="search">' +
		'<div class="shine-search-wrapper"><input name="q" placeholder="type here and hit enter" tabindex="20" type="text" id="shine-search-box">' +
		'<a href="https://www.reddit.com/wiki/search" title="advanced search: by author, subreddit..."></a>' +
		"</div>" +
		'<input tabindex="22" type="submit" value="">';

	if (currentSubreddit && currentSubreddit.length) {
		htmlToAdd =
			htmlToAdd +
			'<label class="currentSubreddit"><input type="checkbox" name="restrict_sr" tabindex="21"> limit to ' +
			currentSubreddit +
			"</label>";
	}

	htmlToAdd = htmlToAdd + "</form>";

	$("body").append(htmlToAdd);

	$("#header").append(
		"" +
			'<div class="layout-switch">' +
			'<svg class="grid-switch" fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M3,11H11V3H3M3,21H11V13H3M13,21H21V13H13M13,3V11H21V3" /></svg>' +
			'<svg class="list-switch" fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M3,4H21V8H3V4M3,10H21V14H3V10M3,16H21V20H3V16Z" /></svg>' +
			'<svg class="list-side-switch" fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M3,16h8v4H3V16z M3,14h8v-4H3V14z M3,8h8V4H3V8z M13,4v16h8V4H13z"/></svg>' +
			"</div>"
	);

	if ($(".pagename a").attr("href") != undefined) {
		$(".shine-submit").attr("href", $(".pagename a").attr("href") + "submit/");
	} else {
		$(".shine-submit").attr("href", "/submit/");
	}

	// moving subscribe button into nav
	if (window.location.href.indexOf("reddit.com/subreddits/") == -1) {
		$(".side .subscribe-button")
			.clone()
			.prependTo(".shine-nav");
		$(".shine-nav .subscribe-button .option").addClass(
			"shine-menu-button shine-subscribe"
		);
	}

	var tabsHtml;

	// tabsHtml = `<div class="settings-tabs">`;
	// for (var i = 0; i < settingsContent.tabs.length; i++) {
	// 	var tabActive = i == 0 ? "tab-active" : "";
	// 	tabsHtml += `<div data-settings-panel=".panel-${
	// 		settingsContent.tabs[i].name
	// 	}" class="tab tab-${settingsContent.tabs[i].name} ${tabActive}">${
	// 		settingsContent.tabs[i].title
	// 	}</div>`;
	// }
	// tabsHtml += `</div>`;

	tabsHtml = `<div class="settings-tabs">`;
	for (var i in settingsContent) {
		tabsHtml += `<div data-settings-panel=".panel-${i}" class="tab tab-${i}">${
			settingsContent[i].title
		}</div>`;
	}
	tabsHtml += `</div>`;

	var colorNames, colorHtml;

	colorNames = [
		"red",
		"orange",
		"amber",
		"yellow",
		"lime",
		"greenlight",
		"shamrock",
		"teal",
		"cyan",
		"blue",
		"indigo",
		"purple",
		"pink"
	];

	colorHtml = "";
	for (var i = 0; i < colorNames.length; i++) {
		colorHtml += `<label class="color ${colorNames[i]}">
			<input type="radio" name="settings-color-theme" value="${colorNames[i]}">
			<div class="button"><span></span></div>
		</label>`;
	}

	var iconNames, iconTitles, iconHtml;

	iconNames = ["gray", "color", "accent", "lines"];

	iconTitles = ["Grayscale", "Colorful", "Color-accented", "Linear"];

	iconHtml = `<select name="settings-color-switch" id="settings-color-switch">`;
	for (var i = 0; i < iconNames.length; i++) {
		iconHtml += `<option value="${iconNames[i]}">${iconTitles[i]}</option>`;
	}
	iconHtml += `</select>`;

	var settingsHtml2 = `
<div class="settings-panel">
	${tabsHtml}
<div class="panel panel-default panel-active">
			${buildInputs(settingsContent.default.content)}
	<p>To add or edit subreddit or multireddit defaults, please go to that subreddit or multireddit and click the grid view or list view icon in the top bar. To remove a default from the lists below, click the delete icon.</p>
	<div class="settings-halves">
		<div class="settings-column-half">
			<label>Subreddit Defaults</label>
			<div class="settings-subreddit-defaults"></div>
		</div>
		<div class="settings-column-half">
			<label>Multireddit Defaults</label>
			<div class="settings-multireddit-defaults"></div>
		</div>
	</div>
</div>
<div class="panel panel-customize">
	<label for="settings-color-theme">Color Selector</label>
	<span class="settings-small-print">Pick your color accent.</span>
	<div id="colorselect">
		${colorHtml}
	</div>
		${buildThemes(settingsContent.customize.content.theme)}
	<div class="settings-halves">
		<div class="settings-column-half">
			<label for="settings-layout-switch">List View Design</label>
			<span class="settings-small-print">Select your desired design.</span>
			<select name="settings-layout-switch" id="settings-layout-switch">
				<option value="modern">Flat (modern)</option>
				<option value="legacy">Cards (legacy)</option>
			</select>
		</div>
		<div class="settings-column-half">
			<label for="settings-color-switch">Icon type for posts</label>
			<span class="settings-small-print">This little setting will add more color to your theme.</span>
			${iconHtml}
		</div>
	</div>
</div>
<div class="panel panel-grid">
	<p>The settings below are applied to all Grid View pages.</p>
	${buildInputs(settingsContent.grid.content)}
</div>
<div class="panel panel-list">
	<p>The settings below are applied to all List View pages.</p>
	${buildInputs(settingsContent.list.content)}
</div>
<div class="panel panel-keys">
	<p>These are currently available keyboard shortcuts:</p>
	<div class="settings-halves">
		<div class="settings-column-half">
			<ul class="settings-keyboard">
				<li><span><kbd>f</kbd></span> Open search box</li>
				<li><span><kbd>q</kbd></span> Toggle sidebar</li>
				<li><span><kbd>m</kbd></span> Toggle multireddits</li>
				<li><span><kbd>k</kbd></span> Go to next post</li>
				<li><span><kbd>j</kbd></span> Go to previous post</li>
			</ul>
		</div>
		<div class="settings-column-half">
		<ul class="settings-keyboard">
			<li><span><kbd>w</kbd></span> Upvote currently viewed post</li>
			<li><span><kbd>s</kbd></span> Downvote currently viewed post</li>
			<li><span><kbd>&rarr;</kbd></span> Go to next comment (right arrow)</li>
			<li><span><kbd>&larr;</kbd></span> Go to previous comment (left arrow)</li>
			<li><span><kbd>ESC</kbd></span> Closes expands/settings/search etc</li>
		</ul>
		</div>
	</div>
</div>
<div class="settings-saved">Your settings have been saved.</div>
</div>`;

	// HERE WE ADD THE SETTINGS DIV
	// $("body").append(settingsHtml);
	$("body").append(buildSettings());

	// $(".settings-panel").load(chrome.extension.getURL("html/settings.html"));

	$("body").append('<div class="changelog-panel"></div>');

	$(".changelog-panel").load(chrome.extension.getURL("html/changelog.html"));

	/* COMMENT NAVIGATION */

	if (currentSettings.global.navigate == "show") {
		$("html").addClass("show-comment-navigation");
		$("#settings-comment-navigation").val("show");
	}

	/* MOAR COLOR */

	if (currentSettings.customization.icons == "color") {
		$("html").addClass("colorful");
		$("#settings-color-switch").val("color");
	} else if (currentSettings.customization.icons == "lines") {
		$("html").addClass("colorlines");
		$("#settings-color-switch").val("lines");
	} else if (currentSettings.customization.icons == "accent") {
		$("html").addClass("accent");
		$("#settings-color-switch").val("accent");
	} else {
		$("#settings-color-switch").val("gray");
	}

	/* SETTINGS BAR */

	if (currentSettings.global.shortcuts == "hide") {
		$("#settings-shortcuts-bar").val("hide");
	} else {
		$("html").addClass("show-shortcuts");
	}

	if (currentSettings.global.sidebar_fixed == "fixed") {
		$("#settings-sidebar-fixed").val("fixed");
		$("html").addClass("sidebar-fixed");
	}

	if (currentSettings.customization.layout == "modern") {
		$("html").addClass("modern-layout");
		$("#settings-layout-switch").val("modern");
	}

	$("#settings-list-limit").val(currentSettings.list.limit);
	$("body").attr("data-list-limit", currentSettings.list.limit);

	$("#settings-grid-compact").val(currentSettings.grid.compact);
	$("html").addClass("shine-compact-grid-" + currentSettings.grid.compact);

	$("#settings-grid-limit").val(currentSettings.grid.limit);
	$("body").attr("data-grid-limit", currentSettings.grid.limit);

	/* UPDATE INFO */

	if (currentSettings.version.updateinfo == "hide") {
		$("#settings-update-info").val("hide");
	}

	/* DEFAULT VIEW */

	if (currentSettings.global.layout == "list") {
		$("#settings-default-view").val("list");
	} else {
		$("#settings-default-view").val("grid");
	}

	/* GRID COLUMNS */

	$("#settings-number-columns").val(currentSettings.grid.columns);

	/* NIGHT MODE */

	//$('#settings-main-theme').val( currentSettings.global.night );

	$(
		'input[type="radio"][name="settings-main-theme"][value="' +
			currentSettings.customization.theme +
			'"]'
	).attr("checked", true);

	/* COLOR THEME */

	//$('input[type=radio][name=settings-color-theme]:checked').val( currentSettings.customization.color );
	$(
		'input[type="radio"][name="settings-color-theme"][value="' +
			currentSettings.customization.color +
			'"]'
	).attr("checked", true);

	/* NSFW */

	$("#settings-show-nsfw").val(currentSettings.grid.nsfw);

	/* LIST VIEW */

	$("#settings-list-layout").val(currentSettings.list.columns);

	/* GRID SPLIT */

	if (
		currentSettings.grid.split == "7030" ||
		currentSettings.grid.split == "6040" ||
		currentSettings.grid.split == "5050" ||
		currentSettings.grid.split == "4060" ||
		currentSettings.grid.split == "3070"
	) {
		$("#settings-grid-split").val(currentSettings.grid.split);
	}

	/* LIST SPLIT */

	if (
		currentSettings.list.split == "7030" ||
		currentSettings.list.split == "6040" ||
		currentSettings.list.split == "5050" ||
		currentSettings.list.split == "4060" ||
		currentSettings.list.split == "3070"
	) {
		$("#settings-list-split").val(currentSettings.list.split);
	}

	if (
		currentSettings.customization.theme == undefined ||
		currentSettings.customization.theme == ""
	) {
		if (currentSettings.customization.night == "on") {
			currentSettings.customization.theme = "legacy-night";
		} else {
			currentSettings.customization.theme = "legacy-white";
		}
	}

	// this adds the nightmode class
	if (currentSettings.customization.theme == "legacy-night") {
		clearThemes();
		$("html, body").addClass("res-nightmode");
	} else if (currentSettings.customization.theme == "legacy-white") {
		clearThemes();
	} else if (currentSettings.customization.theme == "modernwhite") {
		clearThemes();
		$("html, body").addClass(
			"lightmode theme-" + currentSettings.customization.theme
		);
	} else {
		clearThemes();
		$("html, body").addClass(
			"res-nightmode theme-" + currentSettings.customization.theme
		);
	}

	// this adds the nightmode class
	if (
		currentSettings.customization.color == undefined ||
		currentSettings.customization.color == ""
	) {
		$("html, body").addClass("color-orange");
		currentSettings.customization.color = "orange";
	} else {
		$("html, body").addClass("color-" + currentSettings.customization.color);
	}

	// this adds hide nsfw class

	if (currentSettings.grid.nsfw == "no") {
		$("html").addClass("shine-hide-nsfw");
	}

	// this adds a class to the html that says if we've paid or not
	$("html").addClass(currentSettings.account.status);

	// this adds the sidebar class and multireddit class
	$("html").addClass(currentSettings.global.sidebar);

	if ($("body").hasClass("with-listing-chooser")) {
		$("html").addClass(currentSettings.global.multis);
	}

	// this cleans up the top right section
	if (!$("body").hasClass("loggedin")) {
		$("#header-bottom-right .user")
			.contents()
			.first()
			.remove();
		$("#header-bottom-right .user")
			.contents()
			.last()
			.remove();
	}

	// this makes sure we're on the home page, a subreddit, or a multireddit
	if (
		$("body").hasClass("listing-page") &&
		!$("body").hasClass("profile-page") &&
		$("#header-bottom-left .pagename").html() != "preferences" &&
		!$("body").hasClass("subreddits-page")
	) {
		//time to decide if we're going to load the list view or the grid view
		var whichView = "";

		//time to check the subreddits
		if (currentSettings.subreddits.length > 0) {
			for (i = 0; i < currentSettings.subreddits.length; i++) {
				windowLocation = $(".pagename a").attr("href");
				subredditURL = currentSettings.subreddits[i].url;

				if (windowLocation != undefined) {
					if (windowLocation.indexOf(subredditURL) != -1) {
						whichView = currentSettings.subreddits[i].layout;
					}
				}

				displayURL = currentSettings.subreddits[i].url;
				displayURL = displayURL.replace("www.reddit.com", "");

				$(".settings-subreddit-defaults").append(
					'<li data-url="' +
						currentSettings.subreddits[i].url +
						'"><a href="http://' +
						currentSettings.subreddits[i].url +
						'">' +
						displayURL +
						'</a><span data-url="' +
						currentSettings.subreddits[i].url +
						'" class="remove-default remove-subreddit-default"></span><span class="default-view">' +
						currentSettings.subreddits[i].layout +
						" view</span></li>"
				);
			}
		}

		// now it's time to check the multireddits
		if (currentSettings.multireddits.length > 0) {
			for (i = 0; i < currentSettings.multireddits.length; i++) {
				windowLocation = $(".pagename a").attr("href");
				multiredditURL = currentSettings.multireddits[i].url;

				if (windowLocation != undefined) {
					if (windowLocation.indexOf(multiredditURL) != -1) {
						whichView = currentSettings.multireddits[i].layout;
					}
				}

				displayURL = currentSettings.multireddits[i].url;
				displayURL = displayURL
					.replace("www.reddit.com/user", "")
					.replace("www.reddit.com/me", "");

				$(".settings-multireddit-defaults").append(
					'<li data-url="' +
						currentSettings.multireddits[i].url +
						'"><a href="http://' +
						currentSettings.multireddits[i].url +
						'">' +
						displayURL +
						'</a><span data-url="' +
						currentSettings.multireddits[i].url +
						'" class="remove-default remove-multireddit-default"></span><span class="default-view">' +
						currentSettings.multireddits[i].layout +
						" view</span></li>"
				);
			}
		}

		// if whichView is still blank, use the default layout
		if (whichView == "") {
			whichView = currentSettings.global.layout;
		}

		// time to load our other javascript files

		if (whichView == "grid") {
			$.getScript(chrome.extension.getURL("scripts/jquery.zoom.min.js"));
			$.getScript(chrome.extension.getURL("scripts/shine-grid.js"));

			thingWidth = screen.width / (parseInt(currentSettings.grid.columns) + 1);

			$("html").attr("data-columns", currentSettings.grid.columns);

			$("head").append(
				"" +
					'<style id="shine-card-width" type="text/css">' +
					"html.SHINE.shine-grid body > .content #siteTable .thing{" +
					"width:" +
					thingWidth +
					"px;" +
					"}" +
					"html.SHINE.shine-grid body > .content #siteTable .thing .preview{" +
					"width:" +
					thingWidth +
					"px;" +
					"flex-basis:" +
					thingWidth +
					"px;" +
					"}" +
					"</style>"
			);

			if (
				currentSettings.grid.split == "7030" ||
				currentSettings.grid.split == "6040" ||
				currentSettings.grid.split == "5050" ||
				currentSettings.grid.split == "4060" ||
				currentSettings.grid.split == "3070"
			) {
				$("html").addClass("shine-splitheme-" + currentSettings.grid.split);
			}
		} else if (whichView == "list") {
			if (currentSettings.list.columns == "two") {
				$("html").addClass("shine-list-classic");
			}

			$.getScript(chrome.extension.getURL("scripts/jquery.zoom.min.js"));
			$.getScript(chrome.extension.getURL("scripts/shine-list.js"));

			if (
				currentSettings.list.split == "7030" ||
				currentSettings.list.split == "6040" ||
				currentSettings.list.split == "5050" ||
				currentSettings.list.split == "4060" ||
				currentSettings.list.split == "3070"
			) {
				if (!$("html").hasClass("shine-list-classic")) {
					$("html").addClass("shine-split-" + currentSettings.list.split);
				}
			}
		}

		// add our view class to the html
		$("html").addClass("shine-" + whichView);
	} else {
		// if we're not on a content page, then load SHINE's default interface

		$("html").addClass("shine-default shine-ready");
	}

	// remove subreddit styling

	headLinks = $("head link");

	for (i = 0; i < headLinks.length; i++) {
		if ($(headLinks[i]).attr("title") == "applied_subreddit_stylesheet") {
			subredditCss = $(headLinks[i]).attr("href");

			$(headLinks[i]).remove();
		}
	}

	$("html").addClass("SHINE");

	if (currentSettings.version.current == undefined) {
		currentSettings.version.current = "1.4.5.5";
		chrome.storage.local.set({ shine: currentSettings });
	}

	var manifest = chrome.runtime.getManifest();
	var shineVersion = manifest.version;

	$("body").append(
		"" +
			'<div class="update-info">' +
			'<div class="update-info-content">' +
			"SHINE got updated to version " +
			shineVersion +
			'<span class="open-changelog">CHANGELOG</span>' +
			'<span class="dismiss-changelog"></span>' +
			"</div>" +
			"</div>"
	);
	if (
		currentSettings.version.current != shineVersion &&
		currentSettings.version.updateinfo != "hide"
	) {
		console.info(
			"JUST UPDATED! Old version:" + currentSettings.version.current
		);
		console.info("JUST UPDATED! New version:" + shineVersion);
		currentSettings.version.dismissed = "no";
		currentSettings.version.current = shineVersion;
		chrome.storage.local.set({ shine: currentSettings });
		$(".update-info").fadeIn("fast");
	} else if (
		currentSettings.version.current == shineVersion &&
		currentSettings.version.updateinfo != "hide" &&
		currentSettings.version.dismissed != "yes"
	) {
		$(".update-info").show();
	}
} // end SHINE function

// this is the function that gets our settings
// this will go get our settings, and then once we've returned everything
// call our SHINE() function to kick off the sexy interface

function getSettings() {
	chrome.storage.local.get("shine", function(data) {
		// if we don't have stored settings, store default then call this function again
		if (data.shine == undefined || data.shine == "") {
			chrome.storage.local.set({ shine: defaultSettings });

			getSettings();
		} else {
			// set our currentSettings variable to whatever was stored
			currentSettings = data.shine;

			SHINE();
		}
	});
}

getSettings();

/* INTERFACE ACTIONS */

function resetInterfaces() {
	$("html").removeClass("expanding");
	$("html").removeClass("expand-images");
	$("html").removeClass("expand-youtubes");
	$("html").removeClass("expand-html5s");
	$("html").removeClass("expand-albums");
	$("html").removeClass("show-search");
	$("html").removeClass("show-submit");
	$("html").removeClass("expand-comments");
	$("html").removeClass("show-shine-bright");
	$(".shine-grid .shine-expand .large-image").html("");
	$(".shine-grid .shine-expand .large-image").css("background-image", "");
	$(".shine-grid .shine-expand .large-youtube").html("");
	$(".shine-grid .shine-expand .large-html5").html("");
	$(".shine-grid .shine-expand .large-album").html("");
	$(".shine-grid .shine-expand .album-thumbnails").html("");
	$(".shine-grid .shine-expand .side-comments").html("");
	$("html").removeClass("show-settings");
	$("html").removeClass("show-changelog");
	$("html").removeClass("shine-hide-children");
}

// THIS IS SUPPOSED TO BE PART OF REWRITTEN SHINE, BUT I HAD NO TIME TO FINISH IT PROPERLY. BETTER NOT TO LOOK AT.
function buildSettings() {
	var returnHtml = `<div class="settings-panel">`;

	// BUILD TABS
	returnHtml += `<div class="settings-tabs">`;
	var n = 0;
	for (var i in settingsContent) {
		var tabActive = n == 0 ? "tab-active" : "";
		returnHtml += `<div data-settings-panel=".panel-${i}" class="tab tab-${i} ${tabActive}">${
			settingsContent[i].title
		}</div>`;
		n++;
	}
	returnHtml += `</div>`;

	// BUILD EACH PANELS

	var m = 0;
	for (var i in settingsContent) {
		var panelActive = m == 0 ? "panel-active" : "";
		returnHtml += `<div class="panel panel-${i} ${panelActive}">`;
		if (settingsContent[i].desc) {
			returnHtml += `<p>${settingsContent[i].desc}</p>`;
		}
		if (i == "customize") {
			returnHtml += buildColors(settingsContent[i].content.color);
			returnHtml += buildThemes(settingsContent[i].content.theme);
			returnHtml += buildInputs(settingsContent[i].content.misc);
		} else if (i == "keys") {
			returnHtml += buildKeys(settingsContent[i].content);
		} else {
			returnHtml += buildInputs(settingsContent[i].content);
		}
		if (m == 0) {
			returnHtml += `
			<p>To add or edit subreddit or multireddit defaults, please go to that subreddit or multireddit and click the grid view or list view icon in the top bar. To remove a default from the lists below, click the delete icon.</p>
			<div class="settings-halves">
				<div class="settings-column-half">
					<label>Subreddit Defaults</label>
					<div class="settings-subreddit-defaults"></div>
				</div>
				<div class="settings-column-half">
					<label>Multireddit Defaults</label>
					<div class="settings-multireddit-defaults"></div>
				</div>
			</div>`;
		}
		returnHtml += `</div>`;
		m++;
	}
	returnHtml += `<div class="settings-saved">Your settings have been saved.</div>`;
	returnHtml += `</div>`;
	return returnHtml;
}

function buildInputs(tab) {
	var tabHalf = Math.ceil(tab.length / 2);
	var returnHtml = `<div class="settings-halves">`;
	for (var i = 0; i < tab.length; i++) {
		if (i == 0 || i == tabHalf) {
			returnHtml += `<div class="settings-column-half">`;
		}
		returnHtml += listInputs(tab[i]);
		if (i == tabHalf - 1 || i == tab.length - 1) {
			returnHtml += `</div>`;
		}
	}
	returnHtml += `</div>`;
	return returnHtml;
}

function buildThemes(tab) {
	var returnHtml = `<label for="settings-${tab.name}">${tab.title}</label>`;
	returnHtml += `<span class="settings-small-print">${tab.desc}</span>`;
	returnHtml += `<div id="themeselect">`;
	for (var i = 0; i < tab.options.length; i++) {
		returnHtml += `<label class="${tab.options[i].value}">
			<input type="radio" name="settings-${tab.name}" value="${tab.options[i].value}">
			<div class="foreground">
				<span>Aa</span>
				<div class="background"></div>
				<div class="secondary"></div>
			</div>
			<div class="theme-name">${tab.options[i].title}</div>
		</label>`;
	}
	returnHtml += `</div>`;
	return returnHtml;
}

function buildColors(tab) {
	var returnHtml = `<label for="settings-${tab.name}">${tab.title}</label>`;
	returnHtml += `<span class="settings-small-print">${tab.desc}</span>`;
	returnHtml += `<div id="colorselect">`;
	for (var i = 0; i < tab.options.length; i++) {
		returnHtml += `<label class="color ${tab.options[i]}">
			<input type="radio" name="settings-${tab.name}" value="${tab.options[i]}">
			<div class="button"><span></span></div>
		</label>`;
	}
	returnHtml += `</div>`;
	return returnHtml;
}

function buildKeys(tab) {
	var tabHalf = Math.ceil(tab.length / 2);
	var returnHtml = `<div class="settings-halves">`;
	for (var i = 0; i < tab.length; i++) {
		if (i == 0 || i == tabHalf) {
			returnHtml += `<div class="settings-column-half"><ul class="settings-keyboard">`;
		}
		returnHtml += `<li><span><kbd>${tab[i].value}</kbd></span> ${
			tab[i].title
		}</li>`;
		if (i == tabHalf - 1 || i == tab.length - 1) {
			returnHtml += `</ul></div>`;
		}
	}
	returnHtml += `</div>`;
	return returnHtml;
}

// `<label for="settings-default-view">Default View</label>
// <span class="settings-small-print">The default view for most pages.</span>
// <select name="settings-default-view" id="settings-default-view">
// 	<option value="list">List View</option>
// 	<option value="grid">Grid View</option>
// </select>`
function listInputs(input) {
	var inputHtml = `<label for="settings-${input.name}">${input.title}</label>`;
	inputHtml += input.desc
		? `<span class="settings-small-print">${input.desc}</span>`
		: ``;
	inputHtml += `<select name="settings-${input.name}" id="settings-${
		input.name
	}">`;
	for (var i = 0; i < input.options.length; i++) {
		var optionValue = input.options[i].value
			? input.options[i].value
			: input.options[i];
		var optionTitle = input.options[i].title
			? input.options[i].title
			: input.options[i];
		inputHtml += `<option value="${optionValue}">${optionTitle}</option>`;
	}
	inputHtml += `</select>`;
	return inputHtml;
}

function openSearch() {
	resetInterfaces();

	$("html").addClass("show-search");

	$("#shine-search-box").focus();
}

function toggleSidebar() {
	if ($("html").hasClass("show-sidebar")) {
		currentSettings.global.sidebar = "";

		chrome.storage.local.set({ shine: currentSettings });

		resetInterfaces();

		$("html").removeClass("show-sidebar");
	} else {
		currentSettings.global.sidebar = "show-sidebar";

		chrome.storage.local.set({ shine: currentSettings });

		resetInterfaces();

		$("html").addClass("show-sidebar");
	}
}

function toggleMulti() {
	if ($("html").hasClass("show-multireddits")) {
		currentSettings.global.multis = "";

		chrome.storage.local.set({ shine: currentSettings });

		resetInterfaces();

		$("html").removeClass("show-multireddits");
	} else {
		currentSettings.global.multis = "show-multireddits";

		chrome.storage.local.set({ shine: currentSettings });

		resetInterfaces();

		$("html").addClass("show-multireddits");
	}
}

function clearThemes() {
	$("html, body").removeClass("res-nightmode lightmode");
	$("html, body").removeClass(function(index, className) {
		return (className.match(/\btheme-\S+/g) || []).join(" ");
	});
}

$("body").on("click", ".btn", function() {
	$(".dark-background").hide();
	$("#newlayoutinfo").hide();
	$("body").removeClass("SHOWINFO");
	currentSettings.global.newreddit = "hide";

	chrome.storage.local.set({ shine: currentSettings });
});

$("body").on("click", ".dark-background", function() {
	resetInterfaces();
});

$("body").on("click", ".shine-navicon", function() {
	resetInterfaces();
});

$("body").on("click", ".shine-sidebar", function() {
	toggleSidebar();
});

$("body").on("click", ".shine-search", function() {
	openSearch();
});

$("body").on("click", ".shine-multi", function() {
	toggleMulti();
});

// ALL THE SETTINGS STUFF

function saveSettingsMessage() {
	$("html").addClass("settings-are-saved");
	setTimeout("jQuery('html').removeClass('settings-are-saved')", 2000);
}

$("body").on("click", ".open-changelog", function() {
	resetInterfaces();
	$("html").toggleClass("show-changelog");
	$(".update-info").fadeOut("fast");

	currentSettings.version.dismissed = "yes";

	chrome.storage.local.set({ shine: currentSettings });
});

$("body").on("click", ".dismiss-changelog", function() {
	$(".update-info").fadeOut("fast");

	currentSettings.version.dismissed = "yes";

	chrome.storage.local.set({ shine: currentSettings });
});

$("body").on("click", ".shine-settings", function() {
	resetInterfaces();
	$("html").toggleClass("show-settings");
});

$("body").on("click", ".settings-panel .tab", function() {
	$(".settings-panel .panel").removeClass("panel-active");
	$($(this).data("settings-panel")).addClass("panel-active");

	$(".tab").removeClass("tab-active");
	$(this).addClass("tab-active");
});

$("body").on("change", "#settings-default-view", function() {
	currentSettings.global.layout = $(this).val();

	chrome.storage.local.set({ shine: currentSettings }, function() {
		saveSettingsMessage();
	});
});

$("body").on("change", "#settings-sidebar-fixed", function() {
	currentSettings.global.sidebar_fixed = $(this).val();

	if (currentSettings.global.sidebar_fixed == "fixed") {
		$("html").addClass("sidebar-fixed");
	} else {
		$("html").removeClass("sidebar-fixed");
	}

	chrome.storage.local.set({ shine: currentSettings }, function() {
		saveSettingsMessage();
	});
});

$("body").on("change", "#settings-color-switch", function() {
	currentSettings.customization.icons = $(this).val();

	chrome.storage.local.set({ shine: currentSettings }, function() {
		if (currentSettings.customization.icons == "color") {
			$("html").removeClass("colorlines accent");
			$("html").addClass("colorful");
		} else if (currentSettings.customization.icons == "lines") {
			$("html").removeClass("colorful accent");
			$("html").addClass("colorlines");
		} else if (currentSettings.customization.icons == "accent") {
			$("html").removeClass("colorful colorlines");
			$("html").addClass("accent");
		} else {
			$("html").removeClass("colorlines accent colorful");
		}

		saveSettingsMessage();
	});
});

$("body").on("change", "#settings-list-limit", function() {
	currentSettings.list.limit = $(this).val();

	chrome.storage.local.set({ shine: currentSettings }, function() {
		$("body").attr("data-list-limit", currentSettings.list.limit);

		saveSettingsMessage();
	});
});

$("body").on("change", "#settings-grid-limit", function() {
	currentSettings.grid.limit = $(this).val();

	chrome.storage.local.set({ shine: currentSettings }, function() {
		$("body").attr("data-grid-limit", currentSettings.grid.limit);

		saveSettingsMessage();
	});
});

$("body").on("change", "#settings-grid-compact", function() {
	currentSettings.grid.compact = $(this).val();

	chrome.storage.local.set({ shine: currentSettings }, function() {
		$("html").removeClass(function(index, className) {
			return (className.match(/(^|\s)shine-compact-grid-\S+/g) || []).join(" ");
		});
		$("html").addClass("shine-compact-grid-" + currentSettings.grid.compact);

		saveSettingsMessage();
	});
});

$("body").on("change", "#settings-layout-switch", function() {
	currentSettings.customization.layout = $(this).val();

	chrome.storage.local.set({ shine: currentSettings }, function() {
		if (currentSettings.customization.layout == "modern") {
			$("html").addClass("modern-layout");
		} else {
			$("html").removeClass("modern-layout");
		}

		saveSettingsMessage();
	});
});

$("body").on("change", "#settings-shortcuts-bar", function() {
	currentSettings.global.shortcuts = $(this).val();

	chrome.storage.local.set({ shine: currentSettings }, function() {
		if (currentSettings.global.shortcuts == "show") {
			$("html").addClass("show-shortcuts");
		} else {
			$("html").removeClass("show-shortcuts");
		}

		saveSettingsMessage();
	});
});

$("body").on("change", "#settings-comment-navigation", function() {
	currentSettings.global.navigate = $(this).val();

	chrome.storage.local.set({ shine: currentSettings }, function() {
		if (currentSettings.global.navigate == "show") {
			$("html").addClass("show-comment-navigation");
		} else {
			$("html").removeClass("show-comment-navigation");
		}
		saveSettingsMessage();
	});
});

$("body").on("change", "#settings-update-info", function() {
	currentSettings.version.updateinfo = $(this).val();

	chrome.storage.local.set({ shine: currentSettings }, function() {
		saveSettingsMessage();
	});
});

$("body").on("change", "#settings-list-layout", function() {
	currentSettings.list.columns = $(this).val();

	chrome.storage.local.set({ shine: currentSettings }, function() {
		if (
			currentSettings.list.columns == "two" &&
			$("html").hasClass("shine-list")
		) {
			$("html").addClass("shine-list-classic");
			$("html").removeClass(
				"shine-split-7030 shine-split-6040 shine-split-5050 shine-split-4060 shine-split-3070"
			);
		}

		if (currentSettings.list.columns == "one") {
			$("html").removeClass("shine-list-classic");
			$("html").addClass("shine-split-" + currentSettings.list.split);
		}

		saveSettingsMessage();
	});
});

$("body").on("change", "#settings-grid-split", function() {
	currentSettings.grid.split = $(this).val();

	chrome.storage.local.set({ shine: currentSettings }, function() {
		if ($("html").hasClass("shine-grid")) {
			$("html").removeClass(
				"shine-split-7030 shine-split-6040 shine-split-5050 shine-split-4060 shine-split-3070"
			);

			$("html").addClass("shine-split-" + currentSettings.grid.split);
		}

		saveSettingsMessage();
	});
});

$("body").on("change", "#settings-list-split", function() {
	currentSettings.list.split = $(this).val();

	chrome.storage.local.set({ shine: currentSettings }, function() {
		if (
			$("html").hasClass("shine-list") &&
			!$("html").hasClass("shine-list-classic")
		) {
			$("html").removeClass(
				"shine-split-7030 shine-split-6040 shine-split-5050 shine-split-4060 shine-split-3070"
			);

			$("html").addClass("shine-split-" + currentSettings.list.split);
		}

		saveSettingsMessage();
	});
});

// CLICKING THE GRID VIEW SWITCHER

$("body").on("click", ".grid-switch", function() {
	if (
		window.location.href.indexOf("/r/") == -1 &&
		window.location.href.indexOf("/m/") == -1
	) {
		currentSettings.global.layout = "grid";
	} else if (
		$(".pagename a")
			.attr("href")
			.indexOf("/r/") != -1
	) {
		// we're in a subreddit
		if (currentSettings.subreddits.length > 0) {
			foundIt = false;

			for (i = 0; i < currentSettings.subreddits.length; i++) {
				urlToCheck = currentSettings.subreddits[i].url;

				if (
					$(".pagename a")
						.attr("href")
						.indexOf(urlToCheck) != -1
				) {
					currentSettings.subreddits[i].layout = "grid";
					foundIt = true;
					break;
				}
			}

			if (foundIt == false) {
				defaultToAdd = {
					url: $(".pagename a")
						.attr("href")
						.replace("https://", "")
						.replace("http://", ""),
					layout: "grid"
				};

				currentSettings.subreddits.push(defaultToAdd);
			}
		} else {
			defaultToAdd = {
				url: $(".pagename a")
					.attr("href")
					.replace("https://", "")
					.replace("http://", ""),
				layout: "grid"
			};

			currentSettings.subreddits.push(defaultToAdd);
		}
	} else if (
		$(".pagename a")
			.attr("href")
			.indexOf("/m/") != -1
	) {
		// we're in a multireddit
		if (currentSettings.multireddits.length > 0) {
			foundIt = false;

			for (i = 0; i < currentSettings.multireddits.length; i++) {
				urlToCheck = currentSettings.multireddits[i].url;

				if (
					$(".pagename a")
						.attr("href")
						.indexOf(urlToCheck) != -1
				) {
					currentSettings.multireddits[i].layout = "grid";
					foundIt = true;
					break;
				}
			}

			if (foundIt == false) {
				defaultToAdd = {
					url: $(".pagename a")
						.attr("href")
						.replace("https://", "")
						.replace("http://", ""),
					layout: "grid"
				};

				currentSettings.multireddits.push(defaultToAdd);
			}
		} else {
			defaultToAdd = {
				url: $(".pagename a")
					.attr("href")
					.replace("https://", "")
					.replace("http://", ""),
				layout: "grid"
			};

			currentSettings.multireddits.push(defaultToAdd);
		}
	}

	chrome.storage.local.set({ shine: currentSettings }, function() {
		location.reload();
	});
});

// CLICKING THE LIST VIEW SWITCHER

$("body").on("click", ".list-switch", function() {
	currentSettings.list.columns = "one";

	if (
		window.location.href.indexOf("/r/") == -1 &&
		window.location.href.indexOf("/m/") == -1
	) {
		currentSettings.global.layout = "list";
	} else if (
		$(".pagename a")
			.attr("href")
			.indexOf("/r/") != -1
	) {
		// we're in a subreddit
		if (currentSettings.subreddits.length > 0) {
			foundIt = false;

			for (i = 0; i < currentSettings.subreddits.length; i++) {
				urlToCheck = currentSettings.subreddits[i].url;

				if (
					$(".pagename a")
						.attr("href")
						.indexOf(urlToCheck) != -1
				) {
					currentSettings.subreddits[i].layout = "list";
					foundIt = true;
					break;
				}
			}

			if (foundIt == false) {
				defaultToAdd = {
					url: $(".pagename a")
						.attr("href")
						.replace("https://", "")
						.replace("http://", ""),
					layout: "list"
				};

				currentSettings.subreddits.push(defaultToAdd);
			}
		} else {
			defaultToAdd = {
				url: $(".pagename a")
					.attr("href")
					.replace("https://", "")
					.replace("http://", ""),
				layout: "list"
			};

			currentSettings.subreddits.push(defaultToAdd);
		}
	} else if (
		$(".pagename a")
			.attr("href")
			.indexOf("/m/") != -1
	) {
		// we're in a multireddit
		if (currentSettings.multireddits.length > 0) {
			foundIt = false;

			for (i = 0; i < currentSettings.multireddits.length; i++) {
				urlToCheck = currentSettings.multireddits[i].url;

				if (
					$(".pagename a")
						.attr("href")
						.indexOf(urlToCheck) != -1
				) {
					currentSettings.multireddits[i].layout = "list";
					foundIt = true;
					break;
				}
			}

			if (foundIt == false) {
				defaultToAdd = {
					url: $(".pagename a")
						.attr("href")
						.replace("https://", "")
						.replace("http://", ""),
					layout: "list"
				};

				currentSettings.multireddits.push(defaultToAdd);
			}
		} else {
			defaultToAdd = {
				url: $(".pagename a")
					.attr("href")
					.replace("https://", "")
					.replace("http://", ""),
				layout: "list"
			};

			currentSettings.multireddits.push(defaultToAdd);
		}
	}

	chrome.storage.local.set({ shine: currentSettings }, function() {
		location.reload();
	});
});

$("body").on("click", ".list-side-switch", function() {
	currentSettings.list.columns = "two";

	if (
		window.location.href.indexOf("/r/") == -1 &&
		window.location.href.indexOf("/m/") == -1
	) {
		currentSettings.global.layout = "list";
	} else if (
		$(".pagename a")
			.attr("href")
			.indexOf("/r/") != -1
	) {
		// we're in a subreddit
		if (currentSettings.subreddits.length > 0) {
			foundIt = false;

			for (i = 0; i < currentSettings.subreddits.length; i++) {
				urlToCheck = currentSettings.subreddits[i].url;

				if (
					$(".pagename a")
						.attr("href")
						.indexOf(urlToCheck) != -1
				) {
					currentSettings.subreddits[i].layout = "list";
					foundIt = true;
					break;
				}
			}

			if (foundIt == false) {
				defaultToAdd = {
					url: $(".pagename a")
						.attr("href")
						.replace("https://", "")
						.replace("http://", ""),
					layout: "list"
				};

				currentSettings.subreddits.push(defaultToAdd);
			}
		} else {
			defaultToAdd = {
				url: $(".pagename a")
					.attr("href")
					.replace("https://", "")
					.replace("http://", ""),
				layout: "list"
			};

			currentSettings.subreddits.push(defaultToAdd);
		}
	} else if (
		$(".pagename a")
			.attr("href")
			.indexOf("/m/") != -1
	) {
		// we're in a multireddit
		if (currentSettings.multireddits.length > 0) {
			foundIt = false;

			for (i = 0; i < currentSettings.multireddits.length; i++) {
				urlToCheck = currentSettings.multireddits[i].url;

				if (
					$(".pagename a")
						.attr("href")
						.indexOf(urlToCheck) != -1
				) {
					currentSettings.multireddits[i].layout = "list";
					foundIt = true;
					break;
				}
			}

			if (foundIt == false) {
				defaultToAdd = {
					url: $(".pagename a")
						.attr("href")
						.replace("https://", "")
						.replace("http://", ""),
					layout: "list"
				};

				currentSettings.multireddits.push(defaultToAdd);
			}
		} else {
			defaultToAdd = {
				url: $(".pagename a")
					.attr("href")
					.replace("https://", "")
					.replace("http://", ""),
				layout: "list"
			};

			currentSettings.multireddits.push(defaultToAdd);
		}
	}

	chrome.storage.local.set({ shine: currentSettings }, function() {
		location.reload();
	});
});

// DELETE DEFAULT VIEW BUTTON
$("body").on("click", ".remove-subreddit-default", function() {
	for (i = 0; i < currentSettings.subreddits.length; i++) {
		if (currentSettings.subreddits[i].url == $(this).data("url")) {
			currentSettings.subreddits.splice(i, 1);

			chrome.storage.local.set({ shine: currentSettings }, function() {
				saveSettingsMessage();
			});

			$(this)
				.parents("li")
				.remove();
		}
	}
});

$("body").on("click", ".remove-multireddit-default", function() {
	for (i = 0; i < currentSettings.multireddits.length; i++) {
		if (currentSettings.multireddits[i].url == $(this).data("url")) {
			currentSettings.multireddits.splice(i, 1);

			chrome.storage.local.set({ shine: currentSettings }, function() {
				saveSettingsMessage();
			});

			$(this)
				.parents("li")
				.remove();
		}
	}
});

$("body").on("change", "#settings-number-columns", function() {
	currentSettings.grid.columns = $(this).val();

	chrome.storage.local.set({ shine: currentSettings }, function() {
		if ($("html").hasClass("shine-grid")) {
			$("head")
				.find("#shine-card-width")
				.remove();

			thingWidth = screen.width / (parseInt(currentSettings.grid.columns) + 1);

			$("head").append(
				"" +
					'<style id="shine-card-width" type="text/css">' +
					"html.SHINE.shine-grid body > .content #siteTable .thing{" +
					"width:" +
					thingWidth +
					"px;" +
					"}" +
					"html.SHINE.shine-grid body > .content #siteTable .thing .preview{" +
					"width:" +
					thingWidth +
					"px;" +
					"flex-basis:" +
					thingWidth +
					"px;" +
					"}" +
					"</style>"
			);
		}

		saveSettingsMessage();
	});
});

$("body").on(
	"change",
	"input[type=radio][name=settings-main-theme]",
	function() {
		if ($(this).val() == "legacy-dark") {
			currentSettings.customization.theme = "legacy-dark";

			chrome.storage.local.set({ shine: currentSettings }, function() {
				if (!$("#nightSwitchToggleContainer").hasClass("enabled")) {
					$("#nightSwitchToggleContainer").click();
				}

				clearThemes();

				saveSettingsMessage();
			});
		} else if ($(this).val() == "legacy-white") {
			currentSettings.customization.theme = "legacy-white";

			chrome.storage.local.set({ shine: currentSettings }, function() {
				if ($("#nightSwitchToggleContainer").hasClass("enabled")) {
					$("#nightSwitchToggleContainer").click();
				}

				clearThemes();

				saveSettingsMessage();
			});
		} else if ($(this).val() == "modernwhite") {
			currentSettings.customization.theme = "modernwhite";

			chrome.storage.local.set({ shine: currentSettings }, function() {
				if ($("#nightSwitchToggleContainer").hasClass("enabled")) {
					$("#nightSwitchToggleContainer").click();
				}

				clearThemes();

				$("html, body").addClass("lightmode");

				$("html, body").addClass(
					"theme-" + currentSettings.customization.theme
				);

				saveSettingsMessage();
			});
		} else {
			currentSettings.customization.theme = $(this).val();

			chrome.storage.local.set({ shine: currentSettings }, function() {
				if (!$("#nightSwitchToggleContainer").hasClass("enabled")) {
					$("#nightSwitchToggleContainer").click();
				}

				clearThemes();

				$("html, body").addClass(
					"res-nightmode theme-" + currentSettings.customization.theme
				);

				saveSettingsMessage();
			});
		}
	}
);

$("body").on(
	"change",
	"input[type=radio][name=settings-color-theme]",
	function() {
		currentSettings.customization.color = $(this).val();

		chrome.storage.local.set({ shine: currentSettings }, function() {
			$("html").removeClass(function(index, className) {
				return (className.match(/\bcolor-\S+/g) || []).join(" ");
			});
			$("body").removeClass(function(index, className) {
				return (className.match(/\bcolor-\S+/g) || []).join(" ");
			});

			$("html, body").addClass("color-" + currentSettings.customization.color);

			saveSettingsMessage();
		});
	}
);

$("body").on("change", "#settings-show-nsfw", function() {
	if ($(this).val() == "no") {
		currentSettings.grid.nsfw = "no";

		chrome.storage.local.set({ shine: currentSettings }, function() {
			$("html").addClass("shine-hide-nsfw");

			saveSettingsMessage();
		});
	} else {
		currentSettings.grid.nsfw = "yes";

		chrome.storage.local.set({ shine: currentSettings }, function() {
			$("html").removeClass("shine-hide-nsfw");

			saveSettingsMessage();
		});
	}
});

$("*[data-res-css]").attr("style", "");

$("body").on("mouseover", "#themeselect", function() {
	$(".dark-background").addClass("hide-bg");
});

$("body").on("mouseout", "#themeselect", function() {
	$(".dark-background").removeClass("hide-bg");
});

$("body").on("mouseover", "#colorselect", function() {
	$(".dark-background").addClass("hide-bg");
});

$("body").on("mouseout", "#colorselect", function() {
	$(".dark-background").removeClass("hide-bg");
});

$(".menuarea")
	.detach()
	.appendTo("#header-bottom-left");

if ($(".menuarea .spacer form.sendreplies-button").length) {
	$(".menuarea .spacer form.sendreplies-button")
		.parent()
		.detach()
		.appendTo(".panestack-title");
}

$(".hohoho-header")
	.detach()
	.prependTo("span.user");

$("body").on("mouseover", ".menuarea", function() {
	$(".menuarea")
		.find(".drop-choices.lightdrop")
		.addClass("inuse");
});


$.getScript(chrome.extension.getURL("scripts/shine-shortcuts.js"));

$("body").keyup(function(e) {
	if (
		e.target.nodeName.toLowerCase() !== "input" &&
		e.target.nodeName.toLowerCase() !== "textarea"
	) {
		switch (e.keyCode) {
			case 77:
				toggleMulti();
				break;
			case 81:
				toggleSidebar();
				break;
		}
	}
});
